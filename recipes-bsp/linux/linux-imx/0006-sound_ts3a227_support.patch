diff --git a/include/sound/wm8960.h b/include/sound/wm8960.h
index 275fd5b201ce..0bae14d24bcf 100644
--- a/include/sound/wm8960.h
+++ b/include/sound/wm8960.h
@@ -17,6 +17,8 @@ struct wm8960_data {
 
 	bool shared_lrclk;  /* DAC and ADC LRCLKs are wired together */
 
+	bool mic_bias_0_6;  /* MIC BIAS 0.6 * AVDD */
+
 	/*
 	 * Setup for headphone detection
 	 *
diff --git a/sound/soc/codecs/wm8960.c b/sound/soc/codecs/wm8960.c
index 0654e1bef0eb..afbc8efbb225 100644
--- a/sound/soc/codecs/wm8960.c
+++ b/sound/soc/codecs/wm8960.c
@@ -1373,6 +1373,9 @@ static void wm8960_set_pdata_from_of(struct i2c_client *i2c,
 	if (of_property_read_bool(np, "wlf,shared-lrclk"))
 		pdata->shared_lrclk = true;
 
+	if (of_property_read_bool(np, "wlf,mic-bias-0.6"))
+		pdata->mic_bias_0_6 = true;
+
 	of_property_read_u32_array(np, "wlf,gpio-cfg", pdata->gpio_cfg,
 				   ARRAY_SIZE(pdata->gpio_cfg));
 
@@ -1454,6 +1457,10 @@ static int wm8960_i2c_probe(struct i2c_client *i2c,
 	regmap_update_bits(wm8960->regmap, WM8960_ADDCTL1, 3,
 			   wm8960->pdata.hp_cfg[2]);
 
+	/* Set Mic BIAS to 2.145 V */
+	regmap_update_bits(wm8960->regmap, WM8960_ADDCTL4, 1,
+			   wm8960->pdata.mic_bias_0_6);
+
 	i2c_set_clientdata(i2c, wm8960);
 
 	ret = devm_snd_soc_register_component(&i2c->dev,
diff --git a/sound/soc/fsl/fsl-asoc-card.c b/sound/soc/fsl/fsl-asoc-card.c
index d886f46264fb..ab988f6189fc 100644
--- a/sound/soc/fsl/fsl-asoc-card.c
+++ b/sound/soc/fsl/fsl-asoc-card.c
@@ -103,6 +103,7 @@ struct fsl_asoc_card_priv {
 	struct codec_priv codec_priv;
 	struct cpu_priv cpu_priv;
 	struct snd_soc_card card;
+	struct snd_soc_aux_dev headset_dev;
 	u8 streams;
 	u32 sample_rate;
 	snd_pcm_format_t sample_format;
@@ -672,6 +676,29 @@ static int fsl_asoc_card_late_probe(struct snd_soc_card *card)
 	return 0;
 }

+static int fsl_jack_ts3a227_init(struct snd_soc_component *component)
+{
+	struct fsl_asoc_card_priv *priv = snd_soc_card_get_drvdata(component->card);
+	int ret;
+
+	priv->hp_jack.pin.pin = "Headphone Jack";
+	priv->hp_jack.pin.mask = SND_JACK_HEADSET;
+
+	ret = snd_soc_card_jack_new_pins(&priv->card, priv->hp_jack.pin.pin,
+		SND_JACK_HEADSET |
+		SND_JACK_BTN_0 | SND_JACK_BTN_1 |
+		SND_JACK_BTN_2 | SND_JACK_BTN_3,
+		&priv->hp_jack.jack, &priv->hp_jack.pin, 1);
+	if (ret) {
+		dev_warn(priv->card.dev, "hs jack init failed (%d)\n", ret);
+		return ret;
+	}
+
+	ret = snd_soc_component_set_jack(component, &priv->hp_jack.jack, NULL);
+
+	return ret;
+}
+
 static int fsl_asoc_card_probe(struct platform_device *pdev)
 {
 	struct device_node *cpu_np, *codec_np, *asrc_np;
@@ -1076,6 +1103,14 @@ static int fsl_asoc_card_probe(struct platform_device *pdev)
 		priv->card.num_dapm_routes = ARRAY_SIZE(audio_map_esai);
 	}
 
+	priv->headset_dev.dlc.of_node = of_parse_phandle(pdev->dev.of_node,
+		"audio-headset", 0);
+	if (priv->headset_dev.dlc.of_node) {
+		priv->headset_dev.init = fsl_jack_ts3a227_init;
+		priv->card.aux_dev = &priv->headset_dev;
+		priv->card.num_aux_devs = 1;
+	}
+
 	/* Finish card registering */
 	platform_set_drvdata(pdev, priv);
 	snd_soc_card_set_drvdata(&priv->card, priv);
@@ -1088,6 +1123,13 @@ static int fsl_asoc_card_probe(struct platform_device *pdev)
 		goto asrc_fail;
 	}
 
+	if (priv->headset_dev.dlc.of_node) {
+		snd_soc_dapm_force_enable_pin(&priv->card.dapm, "MICB");
+		snd_soc_jack_notifier_register(&priv->hp_jack.jack, &hp_jack_nb);
+		of_node_put(priv->headset_dev.dlc.of_node);
+		goto asrc_fail;
+	}
+
 	/*
 	 * Properties "hp-det-gpio" and "mic-det-gpio" are optional, and
 	 * asoc_simple_init_jack uses these properties for creating
