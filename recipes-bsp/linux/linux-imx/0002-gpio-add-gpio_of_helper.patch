This patch adds new driver "gpio-of-helper", witch has possibility to export
gpios defined in dt. It exports them in defined name under
/sysfs/class/gpio/name.
It's rebased from Pantelis Antoniou patch to new kernel.
Usage example:
	gpio {
		compatible = "gpio-of-helper";
		status = "okay";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_gpio>;

		gsm_on {
			gpio-name = "gsm_on";
			gpio = <&pioB 13 GPIO_ACTIVE_HIGH>;
			output;
			init-low;
		};
	};

This patch needs Alexey Ignatov [PATCH] gpiolib: allow exporting gpios with
custom names.

Signed-off-by: Jiri Prchal <jiri.prchal@aksignal.cz>
---
 drivers/gpio/Kconfig          |  14 ++
 drivers/gpio/Makefile         |   1 +
 drivers/gpio/gpio-of-helper.c | 267 ++++++++++++++++++++++++++++++++++
 3 files changed, 282 insertions(+)
 create mode 100644 drivers/gpio/gpio-of-helper.c

diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -94,6 +94,20 @@ config GPIO_CDEV_V1
 
 	  If unsure, say Y.
 
+config GPIO_OF_HELPER
+	bool "GPIO OF helper device"
+	depends on OF_GPIO && GPIO_SYSFS
+	help
+	  Say Y here to add an GPIO OF helper driver
+
+	  Allows you specify a GPIO helper based on OF
+	  which allows simple export of GPIO functionality
+	  in user-space.
+
+	  Features include, value set/get, direction control,
+	  interrupt/value change poll support, event counting
+	  and others.
+
 config GPIO_GENERIC
 	depends on HAS_IOMEM # Only for IOMEM drivers
 	tristate
diff --git a/drivers/gpio/Makefile b/drivers/gpio/Makefile
--- a/drivers/gpio/Makefile
+++ b/drivers/gpio/Makefile
@@ -10,6 +10,7 @@ obj-$(CONFIG_OF_GPIO)		+= gpiolib-of.o
 obj-$(CONFIG_GPIO_CDEV)		+= gpiolib-cdev.o
 obj-$(CONFIG_GPIO_SYSFS)	+= gpiolib-sysfs.o
 obj-$(CONFIG_GPIO_ACPI)		+= gpiolib-acpi.o
+obj-$(CONFIG_GPIO_OF_HELPER)	+= gpio-of-helper.o
 
 # Device drivers. Generally keep list sorted alphabetically
 obj-$(CONFIG_GPIO_REGMAP)	+= gpio-regmap.o
diff --git a/drivers/gpio/gpio-of-helper.c b/drivers/gpio/gpio-of-helper.c
new file mode 100644
--- /dev/null
+++ b/drivers/gpio/gpio-of-helper.c
@@ -0,0 +1,254 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * GPIO OF based helper
+ *
+ * A simple DT based driver to provide access to GPIO functionality
+ * to user-space via sysfs.
+ *
+ * Copyright (C) 2021 Boris Krasnovskiy <boris.krasnovskiy@lairdconnect.com>
+ * Copyright (C) 2013 Pantelis Antoniou <panto@antoniou-consulting.com>
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/gpio/consumer.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/atomic.h>
+#include <linux/interrupt.h>
+#include <gpiolib.h>
+
+struct gpio_entry {
+	struct gpio_desc *desc;
+	atomic64_t counter;
+};
+
+struct gpio_helper {
+	struct gpio_entry *gpios;
+	size_t size;
+};
+
+static const struct of_device_id gpio_of_helper_of_match[] = {
+	{ .compatible = "gpio-of-helper", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, gpio_of_helper_of_match);
+
+static ssize_t status_show(struct device *dev,
+	struct device_attribute *attr, char *buf)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct gpio_helper *priv = platform_get_drvdata(pdev);
+	struct gpio_desc *desc;
+	char *p, *e;
+	int n;
+	unsigned i;
+
+	p = buf;
+	e = p + PAGE_SIZE;
+	n = 0;
+	for (i = 0; i < priv->size; ++i) {
+		desc = priv->gpios[i].desc;
+		if (gpiod_get_direction(desc))
+			n = snprintf(p, e - p, "%2d %-24s %3d %-3s %llu\n",
+				i, desc->label, desc_to_gpio(desc), "IN",
+				(unsigned long long)atomic64_read(&priv->gpios[i].counter));
+		else
+			n = snprintf(p, e - p, "%2d %-24s %3d %-3s\n",
+				i, desc->label, desc_to_gpio(desc), "OUT");
+
+		p += n;
+	}
+
+	return p - buf;
+}
+
+static DEVICE_ATTR_RO(status);
+
+static irqreturn_t gpio_of_helper_handler(int irq, void *ptr)
+{
+	struct gpio_entry *entry = ptr;
+
+	/* caution - low speed interfaces only! */
+	atomic64_inc(&entry->counter);
+
+	return IRQ_HANDLED;
+}
+
+static int gpio_of_entry_create(struct device *dev, struct device_node *node,
+	struct gpio_entry *entry)
+{
+	const char *name;
+	unsigned long irq_flags = 0;
+	enum gpiod_flags gpio_flags;
+	int irq, ret;
+
+	ret = of_property_read_string(node, "gpio-name", &name);
+	if (ret) {
+		dev_err(dev, "Failed to get name property\n");
+		return ret;
+	}
+
+	/* get the type of the node first */
+	if (of_property_read_bool(node, "input")) {
+		gpio_flags = GPIOD_IN;
+		if (of_property_read_bool(node, "count-falling-edge"))
+			irq_flags |= IRQF_TRIGGER_FALLING;
+		if (of_property_read_bool(node, "count-rising-edge"))
+			irq_flags |= IRQF_TRIGGER_RISING;
+	} else if (of_property_read_bool(node, "output")) {
+		if (of_property_read_bool(node, "init-high"))
+			gpio_flags = GPIOD_OUT_HIGH;
+		else if (of_property_read_bool(node, "init-low"))
+			gpio_flags = GPIOD_OUT_LOW;
+		else {
+			dev_err(dev, "Initial gpio state not specified\n");
+			return -EINVAL;
+		}
+	} else {
+		dev_err(dev, "Not valid gpio node type\n");
+		return -EINVAL;
+	}
+
+	entry->desc = devm_gpiod_get_from_of_node(dev, node, "gpio", 0,
+		gpio_flags, name);
+	if (IS_ERR(entry->desc)) {
+		ret = PTR_ERR(entry->desc);
+		dev_err_probe(dev, ret, "Failed to get gpio property of '%s'\n",
+			name);
+		return ret;
+	}
+
+	/* counter mode requested - need an interrupt */
+	if (irq_flags) {
+		irq = gpiod_to_irq(entry->desc);
+		if (irq < 0) {
+			dev_err(dev, "Failed to request gpio '%s' %d\n",
+				name, irq);
+			return irq;
+		}
+
+		ret = devm_request_irq(dev, irq, gpio_of_helper_handler,
+				irq_flags, name, entry);
+		if (ret) {
+			dev_err_probe(dev, ret, "Failed to request irq of '%s'\n",
+				name);
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
+static int gpio_of_helper_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct gpio_helper *priv;
+	struct gpio_entry *entry;
+	struct device_node *cnode;
+	struct pinctrl *pinctrl;
+	unsigned i;
+	int ret;
+
+	pinctrl = devm_pinctrl_get_select_default(dev);
+	if (IS_ERR(pinctrl)) {
+		/* special handling for probe defer */
+		if (PTR_ERR(pinctrl) == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+	}
+
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	priv->size = of_get_child_count(dev->of_node);
+	priv->gpios = devm_kzalloc(dev, sizeof(struct gpio_entry) * priv->size, GFP_KERNEL);
+	if (!priv->gpios)
+		return -ENOMEM;
+
+	entry = priv->gpios;
+
+	for_each_child_of_node(dev->of_node, cnode) {
+		ret = gpio_of_entry_create(dev, cnode, entry);
+		if (ret) {
+			dev_err_probe(dev, ret, "Failed to create gpio entry\n");
+			return ret;
+		}
+		++entry;
+	}
+
+	ret = device_create_file(dev, &dev_attr_status);
+	if (ret) {
+		dev_err(dev, "Failed to create status sysfs attribute\n");
+		return ret;
+	}
+
+	for (i = 0; i < priv->size; ++i) {
+		gpiod_export(priv->gpios[i].desc, 0);
+		gpiod_export_link(dev, priv->gpios[i].desc->label, priv->gpios[i].desc);
+	}
+
+	platform_set_drvdata(pdev, priv);
+
+	dev_dbg(dev, "gpio_of_helper started\n");
+
+	return 0;
+}
+
+static int gpio_of_helper_remove(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct gpio_helper *priv = platform_get_drvdata(pdev);
+	unsigned i;
+
+	for (i = 0; i < priv->size; ++i) {
+		gpiod_unexport(priv->gpios[i].desc);
+		sysfs_remove_link(&dev->kobj, priv->gpios[i].desc->label);
+	}
+
+	device_remove_file(dev, &dev_attr_status);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int gpio_of_helper_runtime_suspend(struct device *dev)
+{
+	pinctrl_pm_select_sleep_state(dev);
+	return 0;
+}
+
+static int gpio_of_helper_runtime_resume(struct device *dev)
+{
+	pinctrl_pm_select_default_state(dev);
+	return 0;
+}
+
+static struct dev_pm_ops gpio_of_helper_pm_ops = {
+	SET_RUNTIME_PM_OPS(gpio_of_helper_runtime_suspend,
+			   gpio_of_helper_runtime_resume, NULL)
+};
+#define GPIO_OF_HELPER_PM_OPS (&gpio_of_helper_pm_ops)
+#else
+#define GPIO_OF_HELPER_PM_OPS NULL
+#endif /* CONFIG_PM_SLEEP */
+
+struct platform_driver gpio_of_helper_driver = {
+	.probe			= gpio_of_helper_probe,
+	.remove		= gpio_of_helper_remove,
+	.driver = {
+		.name		= "gpio-of-helper",
+		.owner		= THIS_MODULE,
+		.pm		= GPIO_OF_HELPER_PM_OPS,
+		.of_match_table	= gpio_of_helper_of_match,
+	},
+};
+
+module_platform_driver(gpio_of_helper_driver);
+
+MODULE_AUTHOR("Boris Krasnovskiy <boris.krasnovskiy@lairdconnect.com>");
+MODULE_DESCRIPTION("GPIO OF Helper driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:gpio-of-helper");
