#!/bin/sh
# -*- mode: shell-script; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Copyright (C) 2012, 2013, 2016 O.S. Systems Software LTDA.
# Authored-by:  Otavio Salvador <otavio@ossystems.com.br>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Add options for the script
# Copyright (C) 2013 Freescale Semiconductor, Inc.

CWD=$(pwd)
PROGNAME="setup-environment"

usage()
{
    echo -e "
Usage: MACHINE=<machine> DISTRO=<distro> . $PROGNAME [-i] [-r] [-v] [-h] <build-dir>
Usage:                                   . $PROGNAME [-i] [-r] [-v] [-h] <build-dir>
    <machine>    machine name
    <distro>     distro name
    <build-dir>  build directory
    Optional parameters: [-i] [-r] [-h]
    * [-i]: Internal build
    * [-r]: Add radio development to setup
    * [-v]: Add Vigiles check to setup
    * [-h]: help

The first usage is for creating a new build directory. In this case, the
script creates the build directory <build-dir>, configures it for the
specified <machine> and <distro>, and prepares the calling shell for running
bitbake on the build directory.

The second usage is for using an existing build directory. In this case,
the script prepares the calling shell for running bitbake on the build
directory <build-dir>. The build directory configuration is unchanged.
"
        echo -e "
Supported machines: `echo; ls sources/meta-summit-som/conf/machine/*.conf \
| sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%"`

Supported distros: `echo; ls sources/meta-summit-som/conf/distro/*.conf \
| sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%"`

Examples:

- To create a new Yocto build directory:
  $ MACHINE=imx8mp-summitsom DISTRO=summitsom-wayland . $PROGNAME build

- To use an existing Yocto build directory:
  $ . $PROGNAME build
"
}

clean_up()
{
   unset EULA REPLY
   unset CWD ARGS PROGNAME
   unset MACHINE DISTRO OEROOT
   unset build_dir_setup_enabled setup_radio setup_summit
}

setup_radio=false
setup_summit=false
setup_vigiles=false

ARGS=$(getopt -o "hirv" -l "help," --name $PROGNAME -- "$@" )
# Print the usage menu if invalid options are specified
if [ $? != 0 -o $# -lt 1 ]; then
   usage && clean_up
   return 1
fi

eval set -- "$ARGS"
while true;
do
    case $1 in
        -h|--help)
           usage
           clean_up
           return 0
           ;;
        -r)
           setup_radio=true
           ;;
        -i)
           setup_summit=true
           ;;
        -v)
           setup_vigiles=true
           ;;
        --)
           shift
           break
           ;;
    esac
    shift
done

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use the BSP as root. Exiting..."
    clean_up
    return 1
fi

[ -e $1/conf/local.conf ] && build_dir_setup_enabled=false \
    || build_dir_setup_enabled=true

[ -z "$FSL_EULA_FILE" ] && FSL_EULA_FILE=$CWD/sources/meta-freescale/EULA
if [ ! -e $FSL_EULA_FILE ]; then
    echo -e "ERROR: EULA not found at $FSL_EULA_FILE."
    clean_up
    return 1
fi

OEROOT=$PWD/sources/poky
if [ -e $PWD/sources/oe-core ]; then
    OEROOT=$PWD/sources/oe-core
fi

[ -n "${BR2_DL_DIR}" ] && export DL_DIR="${BR2_DL_DIR}" || export DL_DIR="${HOME}/.br2_dl_dir"
BB_ENV_PASSTHROUGH_ADDITIONS="${BB_ENV_PASSTHROUGH_ADDITIONS} DL_DIR"

if [ -n "${VERSION}" ]; then
    export IMAGE_VERSION_SUFFIX="-${VERSION}"
    export SUMMIT_VERSION="${VERSION}"
    BB_ENV_PASSTHROUGH_ADDITIONS="${BB_ENV_PASSTHROUGH_ADDITIONS} IMAGE_VERSION_SUFFIX SUMMIT_VERSION SUMMIT_RELEASE_STRING"
fi

TEMPLATECONF=${TEMPLATECONF:-$CWD/sources/meta-summit-som/conf} . $OEROOT/oe-init-build-env $CWD/$1

if ${build_dir_setup_enabled}; then 
    # Change settings according environment
    [ -n "${MACHINE}" ] && sed -e "s,MACHINE ??=.*,MACHINE ??= '$MACHINE',g" -i conf/local.conf
    [ -n "${DISTRO}" ] && sed -e "s,DISTRO ?=.*,DISTRO ?= '$DISTRO',g" -i conf/local.conf

    ${setup_summit} && echo 'OVERRIDES .= ":summit-internal"' >> conf/local.conf
    ${setup_vigiles} &&  echo 'INHERIT += "vigiles"' >> conf/local.conf

    ${setup_summit} && echo 'BBLAYERS += "${BSPDIR}/sources/meta-summit-radio-mfg"'  >> conf/bblayers.conf
    ${setup_radio} && echo 'BBLAYERS += "${BSPDIR}/sources/meta-summit-rdvk"' >> conf/bblayers.conf
    ${setup_radio} && echo 'BBLAYERS += "${BSPDIR}/sources/meta-summit-radio/meta-summit-radio"' >> conf/bblayers.conf
fi

# Handle EULA setting
EULA_ACCEPTED=

# EULA has been accepted already (ACCEPT_FSL_EULA is set in local.conf)
if grep -q '^\s*ACCEPT_FSL_EULA\s*=\s*["'\'']..*["'\'']' conf/local.conf; then
    EULA_ACCEPTED=1
fi

if [ -z "$EULA_ACCEPTED" ] && [ -n "$EULA" ]; then
    # The FSL EULA is not set as accepted in local.conf, but the EULA
    # variable is set in the environment, so we just configure
    # ACCEPT_FSL_EULA in local.conf according to $EULA.
    echo "ACCEPT_FSL_EULA = \"$EULA\"" >> conf/local.conf
elif [ -n "$EULA_ACCEPTED" ]; then
    # The FSL EULA has been accepted once, so ACCEPT_FSL_EULA is set
    # in local.conf.  No need to do anything.
    :
else
    # THE FSL EULA is not set as accepted in local.conf, and EULA is
    # not set in the environment, so we need to ask user if he/she
    # accepts the FSL EULA:
    cat <<EOF

Some BSPs depend on libraries and packages which are covered by NXP's
End User License Agreement (EULA). To have the right to use these binaries in
your images, you need to read and accept the following...

EOF

    sleep 4

    more -d $FSL_EULA_FILE
    echo
    REPLY=
    while [ -z "$REPLY" ]; do
        echo -n "Do you accept the EULA you just read? (y/n) "
        read REPLY
        case "$REPLY" in
            y|Y)
            echo "EULA has been accepted."
            echo "ACCEPT_FSL_EULA = \"1\"" >> conf/local.conf
            ;;
            n|N)
            echo "EULA has not been accepted."
            ;;
            *)
            REPLY=
            ;;
        esac
    done
fi

clean_up
